JPA

1. 개발환경 구축
	1. maven
	2. Jpa 2.2 & hibernate 5.4
	3. 실시간 기록을 위한 log4j framework 활용
		- log4j.properties
	4. JPA library 셋팅
	

2. 의존 관계 library 버전 확인

3. log4j framework
	- log4j.jar 셋팅 필수 [log fro java]
	1. log 기록의 선두
	2. 설정 파일명이 고정
		- log4j.properties
		- key = value 구조
		- 용도
			기록
	3. 기록
		1. 서버 콘솔창
		2. 일반 text 파일로 관리
			- daily로 자동 백엄
			- 권장 확장자
				- file명_날짜.log
		3. 중요한 실시간으로 db(RDBMS & NOSQL)로 백업
	4. 용어
		trace > debug > info > warn > error > fatal
		
4. JPA library
	1. jap framework
	2. hibernate 도 함께 셋팅
	3. 버전 호환 확인 후 사용해야 함
	4. 개발 구조
		1. library 셋팅
		2. 설정파일 필요
			META-INF/persistence.xml
			해당 버전의 스펙에 맞게 선언구가 명시되어 있어야 하며
			tage 및 구조도 제시된 스펙에 개발
		3. 해당 API로 개발
	5. 설정파일 등록
		1. db의 접속 정보
		2. db에 table과 매핑되는 자바 클래스명 등록
		3. 설정 파일 재로딩시 table 생성 또는 유지에 대한 설정 (*매우 중요*)
		
5. 주요 JPA API
	1. @Entity
		- table 과 1:1 매핑된 자바 클래스
		
	2. @Id
		- primary key 의미
		- entity 클래스에 필수
		
	3. @GeneratedValue(strategy = GenerationType.IDENTITY)
		- strategy = GenerationType.IDENTITY
			: mysql의 auto increment
			: 속성 생략시 oracle의 sequence로 구동
			
	4. @Column(unique = true, nullable = false)
		- 생략도 가능
		- 자바 클래스의 멤버 변수명과 table의 컬럼명이 일치
			unique = true : 중복 불허, null 허용
			nullable = false : null 불허 의미
		- name 속성 적용시 자바 클래스의 멤버 변수명과 table의 컬럼명 다르게 가능
		

***********java 주요 interface & class******************
EntityManagerFactory : EntityManager = 1 : *(무한)
EntityManager : EntityTransaction = 1: 1 관계

1. EntityManagerFactory
	- EntityManager 객체 생성
	- xml 설정 정보를 기반으로 해당 db와 entity들 매핑된 정보 read하면서 EntityManager 객체 생성
	
2. EntityManager
	- Connection -> PreparedStatement -> sql 문장 실행 -> 결과 활용 -> 자원 반환의 기능을 처리하는 단일 객체
	- 개별 user가 요청시 해당 객체만 생성해서 제공
	- 주요 메소드
		1. insert - persist()
		2. select - find()
		3. update - setXxx() : 개발자가 개발하는 entity 클래스의 메소드
		4. delete - remove()
		5. close() -> ResultSet -> Statement -> Connection 순으로 자원 반환
		6. clear() - persistent context 잔존된 정보를 삭제하는 메소드
					clear() 호출 후 find 할 경우엔 무조건 select 재 실행
				
3. 	EntityTransaction
	- commit과 rollback 필요한 sql문장
		: insert/update/delete
	- commit
		persist() / setXxx() / remove() 둥의 메소드 영구 저장
 	- rollback
	
		
		
		
		